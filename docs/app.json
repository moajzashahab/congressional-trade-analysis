[{"name":"app.R","content":"library(DT)\nlibrary(dplyr)\nlibrary(readxl)\nlibrary(plotly)\nlibrary(skimr)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(tidyr)\nlibrary(GGally)\nlibrary(ggcorrplot)\n\n# read in data\nfile_path = \"../data/master_df.xlsx\"\ndf = read_excel(file_path)\n\n# set up variables\nmin_trades = 30\nz = qnorm(0.975) \ncategorical_vars = c(\"transaction_type\", \"party\", \"state\", \"gender\")\nnumerical_vars = c(\"trade_price\", \"price_change_pct\", \"seniority_years\", \"excess_return\")\npairplot_vars = c(\"trade_price\", \"price_change_pct\", \"seniority_years\", \"excess_return\", \"trade_success\")\ncorr_vars = c(\"trade_price\", \"price_change_pct\", \"seniority_years\", \"excess_return\", \"trade_success\", \"party_encoded\", \n              \"gender_encoded\")\n\n# set up helper functions\ndefine_trade_success = function(row) {\n                          if (row$transaction_type %in% c(\"Purchase\")) {\n                            return(ifelse(row$price_change_pct > 0, 1, 0))} \n                          else if (row$transaction_type %in% c(\"Sale\", \"Sale (Partial)\", \"Sale (Full)\")) {\n                            return(ifelse(row$price_change_pct < 0, 1, 0))}                       \n                          else {return(NA)}}\n\ndefine_market_success = function(row) {\n                            if (row$transaction_type %in% c(\"Purchase\")) {\n                              return(ifelse(row$excess_return > 0, 1, 0))} \n                            else if (row$transaction_type %in% c(\"Sale\", \"Sale (Partial)\", \"Sale (Full)\")) {\n                              return(ifelse(row$excess_return < 0 & row$price_change_pct < 0, 1, 0))} \n                            else {return(NA)}}\n\ncompute_confidence_interval = function(successes, total) {p = successes / total\n                                  se = sqrt(p * (1 - p) / total)\n                                  lower = max(0, p - z * se) \n                                  upper = min(1, p + z * se)  \n                                  return(list(proportion = p, lower_bound = lower, upper_bound = upper))}\n\n# data processing\ndf = df %>% rowwise() %>%\n    mutate(trade_success = define_trade_success(cur_data())) %>%\n    ungroup() %>% filter(!is.na(trade_success))  \n\ndf = df %>% rowwise() %>%\n     mutate(market_success = define_market_success(cur_data())) %>%\n     ungroup() %>% filter(!is.na(market_success)) \n\ndf = df %>% mutate(party_encoded = as.numeric(as.factor(party)), gender_encoded = as.numeric(as.factor(gender)))\ndf = df %>% mutate(num_committees = rowSums(select(., starts_with(\"committee_\")), na.rm = TRUE))\ndf = df %>% mutate(trade_date = as.Date(trade_date))  \ndf = df %>% mutate(trade_year = format(trade_date, \"%Y\")) \ndf = df %>% mutate(trade_date = as.Date(trade_date),        \n                   trade_year = format(trade_date, \"%Y\")) \n\ncommittee_columns = grep(\"committee_\", colnames(df), value = TRUE)\ncommittee_success_rates = data.frame(committee = character(),\n                                     success_rate = numeric(),\n                                     lower_ci = numeric(),\n                                     upper_ci = numeric(),\n                                     total_trades = integer(),\n                                     stringsAsFactors = FALSE)\n\nfor (committee in committee_columns) {committee_name = gsub(\"committee_\", \"\", committee)  \n        committee_data = df %>% filter(.data[[committee]] == 1)\n        total_trades = nrow(committee_data)\n        successes = nrow(committee_data %>% filter(trade_success == 1))\n\nif (total_trades > 0) {\n        ci = compute_confidence_interval(successes, total_trades)\n        committee_success_rates = rbind(committee_success_rates,\n                                        data.frame(committee = committee_name,\n                                                   success_rate = ci$proportion,\n                                                   lower_ci = ci$lower_bound,\n                                                   upper_ci = ci$upper_bound,\n                                                   total_trades = total_trades))} \nelse {committee_success_rates = rbind(committee_success_rates,\n                                      data.frame(committee = committee_name,\n                                                 success_rate = NA,\n                                                 lower_ci = NA,\n                                                 upper_ci = NA,\n                                                 total_trades = total_trades))}}\n\ncommittee_success_rates = committee_success_rates %>% filter(!is.na(success_rate))\ncommittee_success_rates = committee_success_rates %>% arrange(desc(success_rate))\n\nmax_trades = max(committee_success_rates$total_trades, na.rm = TRUE)\ncommittee_success_rates = committee_success_rates %>% mutate(bubble_size = total_trades / max_trades * 1000) \n\nfiltered_committee_df = committee_success_rates %>% filter(total_trades >= min_trades)\n\nsector_success_rates = df %>% filter(!is.na(sector)) %>%\n                       group_by(sector) %>% summarise(total_trades = n(),\n                                                      successes = sum(trade_success, na.rm = TRUE),\n                                                      .groups = \"drop\") %>%\n                       rowwise() %>% mutate(ci = list(compute_confidence_interval(successes, total_trades)),\n                                            success_rate = ci$proportion, lower_ci = ci$lower_bound, \n                                            upper_ci = ci$upper_bound) %>%\n                       unnest_wider(ci) %>% filter(total_trades >= min_trades) \n\nparty_success = df %>% group_by(party) %>% \n                summarise(average_success_rate = mean(trade_success, na.rm = TRUE), .groups = \"drop\")\n\npairplot_data = df %>% select(all_of(pairplot_vars)) %>% mutate(trade_success = as.factor(trade_success)) \n\nsubset_df = df %>% select(all_of(corr_vars))\ncorr_matrix = cor(subset_df, use = \"complete.obs\")\n\ncommittee_columns = grep(\"committee_\", names(df), value = TRUE)\ncommittee_df = df %>% select(all_of(committee_columns))\ncommittee_corr = cor(committee_df, use = \"complete.obs\")\ncolnames(committee_corr) = abbreviate(colnames(committee_corr), minlength = 15)\nrownames(committee_corr) = abbreviate(rownames(committee_corr), minlength = 15)\n\nsuccess_by_committees = df %>% group_by(num_committees) %>%\n                        summarise(average_success_rate = mean(trade_success, na.rm = TRUE),\n                                  .groups = \"drop\")\n\ntrades_per_year = df %>% group_by(trade_year) %>% summarise(num_trades = n(), .groups = \"drop\")\nsuccess_per_year = df %>% group_by(trade_year) %>%\n                   summarise(avg_success_rate = mean(trade_success, na.rm = TRUE), .groups = \"drop\")\n\nsector_counts = df %>% group_by(sector) %>% summarise(num_trades = n(), .groups = \"drop\")\nsector_success = df %>% group_by(sector) %>%\n                 summarise(avg_success_rate = mean(trade_success, na.rm = TRUE), .groups = \"drop\")\n\nrank_success = df %>% group_by(is_chair_or_vice) %>%\n               summarise(avg_success_rate = mean(trade_success, na.rm = TRUE),  .groups = \"drop\") %>%\n               mutate(Rank = ifelse(is_chair_or_vice == 1, \"Chair/Vice Chair\", \"Member\")) \n\n# set up UI\nui = fluidPage(titlePanel(\"Congressional Trade Analysis\"),\n        tabsetPanel(tabPanel(\"Raw Data\", DTOutput(\"data_table\")),\n                    tabPanel(\"Summary Statistics\", DTOutput(\"skim_table\")),\n                    tabPanel(\"Visualizations for Distributions\", \n                             h3(\"Histograms for Numeric Variables\"),\n                             plotOutput(\"static_histograms\", height = \"600px\"),\n                             hr(),\n                             h3(\"Bar Plots for Categorical Variables\"),\n                             selectInput(\"barplot_variable\", \n                                         \"Select Categorical Variable:\", \n                                          choices = categorical_vars),\n                             plotlyOutput(\"interactive_barplot\"),\n                             hr(),\n                             h3(\"Trade and Market Success Distributions\"),\n                             plotOutput(\"success_plots\", height = \"600px\")),\n                    tabPanel(\"Success Rate Visualizations\",\n                             h3(\"Number of Trades Over Time\"),\n                             plotOutput(\"trades_over_time\", height = \"600px\"),\n                             hr(),\n                             h3(\"Success Rate Over Time\"),\n                             plotOutput(\"success_rate_over_time\", height = \"600px\"),\n                             hr(),\n                             h3(\"Success Rate by Number of Committee Memberships\"),\n                             plotOutput(\"success_by_committee\", height = \"600px\"),\n                             hr(),\n                             h3(\"Success Rate by Committee with Confidence Intervals\"),\n                             plotOutput(\"committee_bar_chart\", height = \"600px\"),\n                             hr(),\n                             h3(\"Committee Success Rate Bubble Chart\"),\n                             plotOutput(\"committee_bubble_chart\", height = \"600px\"),\n                             hr(),\n                             h3(\"Success Rate by Committee (Minimum 30 Trades)\"),\n                             plotOutput(\"filtered_committee_plot\", height = \"600px\"),\n                             hr(),\n                             h3(\"Success Rate by Sector with Confidence Intervals\"),\n                             plotOutput(\"sector_success_plot\", height = \"600px\"),\n                             hr(),\n                             h3(\"Success vs. Seniority Years\"),\n                             plotOutput(\"success_vs_seniority_jitter\", height = \"600px\"),\n                             hr(),\n                             h3(\"Seniority Years by Success\"),\n                             plotOutput(\"success_vs_seniority_boxplot\", height = \"600px\"),\n                             hr(),\n                             h3(\"Success Rate by Party\"),\n                             plotOutput(\"party_success_plot\", height = \"600px\"),\n                             hr(),\n                             h3(\"Number of Trades by Sector\"),\n                             plotOutput(\"num_trades_by_sector\", height = \"600px\"),\n                             hr(),\n                             h3(\"Success Rate by Sector\"),\n                             plotOutput(\"success_by_sector\", height = \"600px\"),\n                             hr(),\n                             h3(\"Success Rate by Rank\")),\n                    tabPanel(\"Pair and Correlation Visualizations\",\n                             h3(\"Pair Plot by Trade Success\"),\n                             plotOutput(\"pair_plot\", height = \"600px\"),\n                             hr(),\n                             h3(\"Correlation Matrix\"),\n                             plotOutput(\"correlation_matrix_plot\", height = \"600px\"),\n                             hr(),\n                             h3(\"Correlation Matrix of Committee Memberships\"),\n                             plotOutput(\"committee_correlation_plot\", height = \"600px\"))\n                    # [ TO DO ] - Add model panel\n                    # ,tabPanel(\"Models\", \n                    #           sidebarLayout(sidebarPanel(h4(\"Model Selection\"),\n                    #                                      selectInput(\"model_type\", \"Choose a Model:\",\n                    #                                                  choices = c(\"Lasso Regression\", \n                    #                                                              \"Ridge Regression\", \n                    #                                                              \"Random Forest\"),\n                    #                                                  selected = \"Lasso Regression\"),\n                    #           actionButton(\"run_model\", \"Run Model\"),\n                    #           hr(),\n                    #           h4(\"Metrics\"),\n                    #           verbatimTextOutput(\"model_metrics\")),\n                    #           mainPanel(h3(\"Model Coefficients / Importance\"),\n                    #                     plotOutput(\"model_coefficients\", height = \"400px\"),\n                    #                     hr(),\n                    #                     h3(\"Model Performance\"),\n                    #                     plotOutput(\"model_performance\", height = \"400px\"),\n                    #                     h3(\"Model Comparison\"),\n                    #                     tableOutput(\"model_comparison\"))))\n                    ))\n\n# set up back-end \nserver = function(input, output, session) {\n            output$data_table = renderDT({datatable(df, \n                                                    options = list(scrollX = TRUE, pageLength = 10, autoWidth = TRUE),\n                                                    caption = \"Congressional Trade Data\")})\n                             \n            output$skim_table = renderDT({skim_df = skim(df)\n                                          datatable(skim_df,\n                                                    options = list(scrollX = TRUE, pageLength = 10, autoWidth = TRUE),\n                                                    caption = \"Summary Statistics for Data\")})\n            \n            output$static_histograms = renderPlot({create_histogram = function(var) {\n                                          ggplot(df, aes(x = .data[[var]])) +\n                                          geom_histogram(aes(y = ..density..), \n                                                         bins = 30, fill = \"blue\", color = \"black\", alpha = 0.7) +\n                                          geom_density(color = \"red\", size = 1) +\n                                          labs(title = paste(\"Distribution of\", var), x = var, y = \"Density\") +\n                                          theme_minimal() +\n                                          theme(plot.title = element_text(hjust = 0.5, size = 14),\n                                                axis.text = element_text(size = 10),\n                                                axis.title = element_text(size = 12))}\n                                          histogram_plots = lapply(numerical_vars, create_histogram)\n                                          grid.arrange(grobs = histogram_plots, ncol = 2)})\n            \n            output$interactive_barplot = renderPlotly({req(input$barplot_variable)\n                                            create_interactive_barplot = function(var) {\n                                                plot_ly(data = df,\n                                                        y = ~reorder(.data[[var]], table(.data[[var]])[.data[[var]]]),\n                                                        type = \"bar\",\n                                                        orientation = \"h\",\n                                                        marker = list(color = \"steelblue\")) %>%\n                                                layout(title = paste(\"Distribution of\", var),\n                                                       xaxis = list(title = \"Count\"),\n                                                       yaxis = list(title = var))}\n                                            create_interactive_barplot(input$barplot_variable)})\n            \n            output$success_plots = renderPlot({\n                                      success_colors = c(\"0\" = \"red\", \"1\" = \"green\")\n                                      \n                                      success_plot = ggplot(df, aes(x = factor(trade_success), fill = factor(trade_success))) +\n                                                     geom_bar() +\n                                                     scale_fill_manual(values = success_colors, \n                                                                       labels = c(\"0: Unsuccessful\", \"1: Successful\")) +\n                                                     labs(title = \"Distribution of Trade Success Outcomes\", \n                                                          x = \"Trade Success\", y = \"Count\", fill = \"Outcome\") +\n                                                     theme(plot.title = element_text(hjust = 0.5, size = 14), \n                                                           axis.text = element_text(size = 10), \n                                                           axis.title = element_text(size = 12), \n                                                           legend.position = \"top\")\n                                      \n                                      market_success_plot = ggplot(df, aes(x = factor(market_success), \n                                                                           fill = factor(market_success))) +\n                                                            geom_bar() +\n                                                            scale_fill_manual(values = success_colors, \n                                                                              labels = c(\"0: Unsuccessful\", \"1: Successful\")) +\n                                                            labs(title = \"Distribution of Market Success Outcomes\", \n                                                                 x = \"Market Success\", y = \"Count\", fill = \"Outcome\") +\n                                                            theme(plot.title = element_text(hjust = 0.5, size = 14), \n                                                                  axis.text = element_text(size = 10), \n                                                                  axis.title = element_text(size = 12), \n                                                                  legend.position = \"top\")\n              \n                                                            grid.arrange(success_plot, market_success_plot, ncol = 2)})\n            \n            output$committee_bar_chart = renderPlot({ggplot(committee_success_rates, \n                                                            aes(x = success_rate, y = reorder(committee, success_rate))) +\n                                                     geom_bar(stat = \"identity\", fill = \"skyblue\", width = 0.8) +\n                                                     geom_errorbar(aes(xmin = lower_ci, xmax = upper_ci), \n                                                                   width = 0.2, color = \"black\") +\n                                                     labs(title = \"Success Rate by Committee with Confidence Intervals\",\n                                                          x = \"Success Rate\", y = \"Committee\") +\n                                                     theme_minimal() +\n                                                     theme(plot.title = element_text(hjust = 0.5, size = 16, \n                                                                                     margin = margin(b = 10)),\n                                                           axis.text = element_text(size = 10),\n                                                           axis.title = element_text(size = 12))})\n            \n            output$committee_bubble_chart = renderPlot({ggplot(committee_success_rates, \n                                                               aes(x = success_rate, \n                                                                   y = reorder(committee, success_rate), \n                                                                   size = bubble_size)) +\n                                                        geom_point(alpha = 0.6, color = \"steelblue\") +\n                                                        scale_size_continuous(range = c(3, 20),\n                                                                              name = \"Number of Trades\",\n                                                                              breaks = c(100, 500, 1000),\n                                                                              labels = c(\"100 trades\", \"500 trades\", \"1000 trades\")) +\n                                                        labs(title = \"Success Rate by Committee (Bubble Size = Number of Trades)\",\n                                                             x = \"Success Rate\", y = \"Committee\") +\n                                                        theme_minimal() +\n                                                        theme(plot.title = element_text(hjust = 0.5, size = 16),\n                                                              axis.text = element_text(size = 10),\n                                                              axis.title = element_text(size = 12),\n                                                              legend.position = \"right\")})\n            \n            output$filtered_committee_plot = renderPlot({ggplot(filtered_committee_df, \n                                                                aes(x = success_rate, y = reorder(committee, success_rate))) +\n                                                         geom_bar(stat = \"identity\", fill = \"skyblue\", width = 0.8) +\n                                                         labs(title = paste(\"Success Rate by Committee (Minimum\", min_trades, \"Trades)\"),\n                                                              x = \"Success Rate\", y = \"Committee\") +\n                                                         theme_minimal() + \n                                                         theme(plot.title = element_text(hjust = 0.5, size = 16, \n                                                                                         margin = margin(b = 10)),\n                                                               axis.text = element_text(size = 10),\n                                                               axis.title = element_text(size = 12),\n                                                               plot.margin = margin(t = 20, r = 20, b = 20, l = 20))})\n            \n            output$sector_success_plot = renderPlot({ggplot(sector_success_rates, \n                                                            aes(x = success_rate, y = reorder(sector, success_rate))) +\n                                                     geom_bar(stat = \"identity\", fill = \"skyblue\", width = 0.8) +\n                                                     geom_errorbar(aes(xmin = lower_ci, xmax = upper_ci), \n                                                                   width = 0.2, color = \"black\") +\n                                                     geom_text(aes(label = paste0(total_trades, \" trades\"), \n                                                                   x = success_rate + 0.01), hjust = 0, size = 3) +\n                                                     labs(title = \"Success Rate by Sector with Confidence Intervals\",\n                                                          x = \"Success Rate\", y = \"Sector\") +\n                                                     theme_minimal() +\n                                                     theme(plot.title = element_text(hjust = 0.5, size = 16),\n                                                           axis.text = element_text(size = 10),\n                                                           axis.title = element_text(size = 12),\n                                                           plot.margin = margin(t = 20, r = 20, b = 20, l = 20))})\n            \n            output$success_vs_seniority_jitter = renderPlot({ggplot(df, aes(x = seniority_years, y = trade_success)) +\n                                                             geom_jitter(width = 0.2, height = 0.05, \n                                                                         color = \"blue\", alpha = 0.6) +\n                                                             labs(title = \"Success vs. Seniority Years\", x = \"Seniority (Years)\", \n                                                                  y = \"Success (1 = Successful Trade)\") + theme_minimal() +\n                                                             theme(plot.title = element_text(hjust = 0.5, size = 14),\n                                                                   axis.text = element_text(size = 10),\n                                                                   axis.title = element_text(size = 12))})\n            \n            output$success_vs_seniority_boxplot = renderPlot({ggplot(df, aes(x = factor(trade_success), y = seniority_years)) +\n                                                              geom_boxplot(fill = \"skyblue\", color = \"black\", width = 0.5) +\n                                                              labs(title = \"Seniority Years by Success\",\n                                                                   x = \"Success (0 = Unsuccessful, 1 = Successful)\",\n                                                                   y = \"Seniority (Years)\") + theme_minimal() +\n                                                              theme(plot.title = element_text(hjust = 0.5, size = 14),\n                                                                    axis.text = element_text(size = 10),\n                                                                    axis.title = element_text(size = 12))})\n            \n            output$party_success_plot = renderPlot({ggplot(party_success, aes(x = party, y = average_success_rate)) +\n                                                    geom_bar(stat = \"identity\", fill = \"skyblue\", color = \"black\") +\n                                                    labs(title = \"Success Rate by Party\", x = \"Party\", \n                                                         y = \"Average Success Rate\") + theme_minimal() +\n                                                    theme(plot.title = element_text(hjust = 0.5, size = 14),\n                                                          axis.text = element_text(size = 10),\n                                                          axis.title = element_text(size = 12))})\n            \n            output$pair_plot = renderPlot({ggpairs(pairplot_data, aes(color = trade_success, alpha = 0.6),\n                                                   lower = list(continuous = wrap(\"points\", alpha = 0.4)),\n                                                   upper = list(continuous = wrap(\"cor\", size = 4)),\n                                                   diag = list(continuous = wrap(\"densityDiag\", alpha = 0.4))) +\n                                           theme_minimal() + theme(legend.position = \"bottom\",\n                                                                   plot.title = element_text(hjust = 0.5, size = 14)) +\n                                           labs(title = \"Pair Plot of Selected Variables by Trade Success\")})\n            \n            output$correlation_matrix_plot = renderPlot({ggcorrplot(corr_matrix, method = \"square\", type = \"full\",\n                                                                    lab = TRUE, lab_size = 4, \n                                                                    colors = c(\"red\", \"white\", \"blue\"),\n                                                                    title = \"Correlation Matrix\",\n                                                                    legend.title = \"Correlation\") +\n                                                         theme_minimal() + theme(plot.title = element_text(hjust = 0.5, size = 16),\n                                                                                 legend.position = \"right\",\n                                                                                 axis.text.x = element_text(angle = 45, hjust = 1))})\n            \n            output$committee_correlation_plot = renderPlot({ggcorrplot(committee_corr, method = \"square\", type = \"full\",\n                                                                       lab = FALSE, colors = c(\"red\", \"white\", \"blue\"),\n                                                                       title = \"Correlation Matrix of Committee Memberships\",\n                                                                       legend.title = \"Correlation\") +\n                                                            theme_minimal() + theme(plot.title = element_text(hjust = 0.5, size = 16),\n                                                                                    legend.position = \"right\",\n                                                                                    axis.text.x = element_text(size = 8, \n                                                                                                               angle = 90, \n                                                                                                               hjust = 1),\n                                                                                    axis.text.y = element_text(size = 8))})\n            output$success_by_committee = renderPlot({ggplot(success_by_committees, \n                                                             aes(x = num_committees, y = average_success_rate)) +\n                                                      geom_bar(stat = \"identity\", fill = \"skyblue\", color = \"black\") +\n                                                      labs(title = \"Success Rate by Number of Committee Memberships\",\n                                                           x = \"Number of Committees\", y = \"Average Success Rate\") +\n                                                      theme_minimal() + theme(plot.title = element_text(hjust = 0.5, size = 16),\n                                                                              axis.text = element_text(size = 10),\n                                                                              axis.title = element_text(size = 12))})\n            \n            output$trades_over_time = renderPlot({ggplot(trades_per_year, \n                                                         aes(x = as.numeric(trade_year), y = num_trades)) +\n                                                  geom_line(group = 1, color = \"blue\", size = 1) +\n                                                  geom_point(color = \"red\", size = 2) +\n                                                  labs(title = \"Number of Trades Over Time\",\n                                                       x = \"Year\", y = \"Number of Trades\") +\n                                                  theme_minimal() +\n                                                  theme(plot.title = element_text(hjust = 0.5, size = 16),\n                                                        axis.text = element_text(size = 10),\n                                                        axis.title = element_text(size = 12))})\n            \n            output$success_rate_over_time = renderPlot({ggplot(success_per_year, \n                                                               aes(x = as.numeric(trade_year), y = avg_success_rate)) +\n                                                        geom_line(group = 1, color = \"blue\", size = 1) +\n                                                        geom_point(color = \"red\", size = 2) +\n                                                        labs(title = \"Success Rate Over Time\", x = \"Year\",\n                                                             y = \"Average Success Rate\") +\n                                                        theme_minimal() + theme(plot.title = element_text(hjust = 0.5, size = 16),\n                                                                                axis.text = element_text(size = 10),\n                                                                                axis.title = element_text(size = 12))})\n            \n            output$success_by_sector = renderPlot({ggplot(sector_success, \n                                                          aes(x = avg_success_rate, y = reorder(sector, avg_success_rate))) +\n                                                   geom_bar(stat = \"identity\", fill = \"darkorange\", color = \"black\") +\n                                                   labs(title = \"Success Rate by Sector\", x = \"Average Success Rate\",\n                                                        y = \"Sector\") + theme_minimal() +\n                                                   theme(plot.title = element_text(hjust = 0.5, size = 16),\n                                                         axis.text = element_text(size = 10),\n                                                         axis.title = element_text(size = 12))})\n            \n            output$num_trades_by_sector = renderPlot({ggplot(sector_counts, \n                                                             aes(x = num_trades, y = reorder(sector, num_trades))) +\n                                                      geom_bar(stat = \"identity\", fill = \"purple\", color = \"black\") +\n                                                      labs(title = \"Number of Trades by Sector\", x = \"Number of Trades\",\n                                                           y = \"Sector\") + theme_minimal() +\n                                                      theme(plot.title = element_text(hjust = 0.5, size = 16),\n                                                            axis.text = element_text(size = 10),\n                                                            axis.title = element_text(size = 12))})\n            \n            output$success_by_rank = renderPlot({ggplot(rank_success, aes(x = Rank, y = avg_success_rate)) +\n                                                 geom_bar(stat = \"identity\", fill = \"skyblue\", color = \"black\") +\n                                                 labs(title = \"Success Rate by Rank\", x = \"Rank\", \n                                                      y = \"Average Success Rate\") + theme_minimal() +\n                                                 theme(plot.title = element_text(hjust = 0.5, size = 16),\n                                                       axis.text = element_text(size = 8),\n                                                       axis.title = element_text(size = 8))})\n            \n            # [TO DO] - Replace with code for models\n            # observeEvent(input$run_model, {model_type <- input$model_type\n            #              isolate({if (model_type == \"Lasso Regression\") {\n            #                         model = \"Placeholder Lasso Model\"} \n            #                       else if (model_type == \"Ridge Regression\") {\n            #                         model = \"Placeholder Ridge Model\"} \n            #                       else if (model_type == \"Random Forest\") {\n            #                         model = \"Placeholder Random Forest Model\"}\n            #                model_results(model)})})\n            # \n            # output$model_metrics = renderPrint({if (is.null(model_results())) {\n            #                                       \"No model has been run yet.\"}\n            #                                    else {paste(\"Metrics for\", input$model_type, \": Placeholder metrics\")}})\n            # \n            # output$model_coefficients = renderPlot({if (is.null(model_results())) {\n            #                                           plot(1, 1, main = \"No Model Coefficients to Display\", type = \"n\")} \n            #                                         else {ggplot(data.frame(x = c(\"Feature 1\", \"Feature 2\"), \n            #                                                                 y = c(0.5, -0.3)), aes(x = x, y = y)) +\n            #                                               geom_bar(stat = \"identity\") +\n            #                                               labs(title = \"Placeholder Coefficients\", \n            #                                                    x = \"Features\", y = \"Coefficient\") +\n            #                                               theme_minimal()}})\n            # \n            # output$model_performance = renderPlot({if (is.null(model_results())) {\n            #                                          plot(1, 1, main = \"No Model Performance to Display\", type = \"n\")} \n            #                                        else {ggplot(data.frame(x = c(0, 0.5, 1), \n            #                                                                y = c(0, 0.8, 1)), \n            #                                                     aes(x = x, y = y)) +\n            #                                              geom_line() +\n            #                                            labs(title = \"Placeholder Performance Curve\", \n            #                                                 x = \"False Positive Rate\", y = \"True Positive Rate\") +\n            #                                            theme_minimal()}})\n            # \n            # output$model_comparison = renderTable({data.frame(Model = c(\"Lasso\", \"Ridge\", \"Random Forest\"),\n            #                                                   Accuracy = c(0.85, 0.83, 0.87),\n            #                                                   AUC = c(0.9, 0.88, 0.91))})\n            }\n\n# run app                        \nshinyApp(ui, server)\n                           ","type":"text"}]
